packages <- c("simstudy",
"ggplot2", "ggpubr", "ggforce"
)
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
options(readr.num_columns = 0)
for (thispack in packages) {
library(thispack,character.only=TRUE,quietly=TRUE,verbose=FALSE)
}
packages <- c("simstudy",
"ggplot2", "ggpubr", "ggforce"
)
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
options(readr.num_columns = 0)
for (thispack in packages) {
library(thispack,character.only=TRUE,quietly=TRUE,verbose=FALSE)
}
packages <- c("simstudy",
"ggplot2", "ggpubr", "ggforce"
)
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
options(readr.num_columns = 0)
for (thispack in packages) {
library(thispack,character.only=TRUE,quietly=TRUE,verbose=FALSE)
}
dx <- genData(N, def)
dx <- genData(N, def)
# Functions -----------------
simCorrelation <- function(def, N, minX = -Inf, maxX = Inf, minY = -Inf, maxY = Inf) {
dx <- genData(N, def)
dx$X[dx$X < minX] = minX
dx$X[dx$X > maxX] = maxX
dx$Y[dx$Y < minY] = minY
dx$Y[dx$Y > maxY] = maxY
ctest = cor.test(dx$X, dx$Y)
return(ctest)
}
plotCorrelation <- function(def, N, ylab = "Y", xlab = "X", minX = -Inf, maxX = Inf, minY = -Inf, maxY = Inf) {
dx <- genData(N, def)
dx$X[dx$X < minX] = minX
dx$X[dx$X > maxX] = maxX
dx$Y[dx$Y < minY] = minY
dx$Y[dx$Y > maxY] = maxY
p = ggplot(data = dx, aes(x=X, y=Y)) +
geom_point() +
geom_smooth(method = "lm")+
stat_regline_equation(aes(label = ..rr.label..))+
theme_pubr() +
ylab(ylab) + xlab(xlab)
print(cor.test(dx$X, dx$Y))
return(p)
}
power_correlation = function(def, startN=20, endN=300, step=10, simulations = 100,
minX = -Inf, maxX = Inf, minY = -Inf, maxY = Inf){
big_results = data.frame(N = numeric(0), r = numeric(0), power = numeric(0))
for (thisN  in seq(startN, endN, by=step)){
print(thisN)
#initialize a list for each sim result
model_results = data.frame(r = numeric(0), pvalue = numeric(0))
for (thisrep in 1:simulations){
set.seed(NULL)
this_result = simCorrelation(def, thisN, minX = minX, maxX=maxX, minY=minY, maxY=maxY)
model_results[nrow(model_results)+1, ] <- c(this_result$estimate, this_result$p.value)
}
big_results[nrow(big_results)+1, ] = c(thisN, mean(model_results$r), mean(model_results$p < .05))
}
powerplot = ggplot(data = big_results, aes(x=N, y=power)) +
geom_hline(yintercept = 0.9, color="black",size=.5, linetype = "dotted") +
geom_line(color = "blue") +
theme_pubr() +
ylim(0,1)
print(powerplot)
return(big_results)
}
simLm <- function(def, N) {
dx <- genData(N, def)
dx$Group =factor(dx$Group)
lm.1 = lm(Y~Group, data = dx)
return(summary(lm.1))
}
anovaLm <- function(def, N) {
dx <- genData(N, def)
dx$Group =factor(dx$Group)
lm.1 = lm(Y~Group, data = dx)
return(anova(lm.1))
}
plotLm <- function(def, N) {
dx <- genData(N, def)
dx$Group =factor(dx$Group)
lm.1 = lm(Y~Group, data = dx)
print(summary(lm.1))
p = ggplot(data = dx, aes(x=Group, y=Y, fill = Group)) +
geom_sina(maxwidth=.4, pch = 21)+
geom_boxplot(width = .4, outlier.shape = NA, alpha = .8) +
xlab(  c("X")  )  + ylab(c("Y") )  +
theme_pubr()
return(p)
}
power_lm = function(def, startN=20, endN=300, step=10, simulations = 100){
big_results = data.frame(N = numeric(0), f = numeric(0), power = numeric(0))
for (thisN  in seq(startN, endN, by=step)){
#for (thisN  in 375){
print(thisN)
#model_results = list()
#initialize a list for each sim result
model_results = data.frame(f = numeric(0), pvalue = numeric(0))
for (thisrep in 1:simulations){
set.seed(NULL)
this_result = anovaLm(def, thisN)
f = this_result['Group', 'F value']
p = this_result['Group', 'Pr(>F)']
model_results[nrow(model_results)+1, ] <- c(f, p)
}
big_results[nrow(big_results)+1, ] = c(thisN, mean(model_results$f), mean(model_results$p < .05))
}
powerplot = ggplot(data = big_results, aes(x=N, y=power)) +
geom_hline(yintercept = 0.9, color="black",size=.5, linetype = "dotted") +
geom_line(color = "blue") +
theme_pubr() +
ylim(0,1)
print(powerplot)
return(big_results)
}
freqplotCat = function(def, N, xLabel = "MyVariable"){
dx <- genData(N, def)
dx$Group = factor(dx$Group)
print(table(dx$Group))
p = ggplot(data = dx, aes(x=Group, fill = Group)) +
geom_bar() +
geom_hline(yintercept = 0, color="black",size=.5) +
xlab(xLabel)
return(p)
}
freqplotContinuous = function(def, N, xLabel = "MyVariable", minval = -Inf, maxval = Inf){
dx <- genData(N, def)
dx$X[dx$X < minval] = minval
dx$X[dx$X > maxval] = maxval
print(paste0("Mean: ", round(mean(dx$X),2), ", Std Dev: ", round(sd(dx$X),2)))
p = ggplot(data = dx, aes(x=X)) +
geom_density(fill = 'lightblue') +
theme_pubr() +
xlab(xLabel)
return(p)
}
def <- defData(varname = "X",  formula = "100", variance = 10^2, dist = "normal")
N = 200
freqplotContinuous(def,N, xLabel = "My Variable", minval = 0, maxval = 200)
### Continuous -----
def <- defData(varname = "X",  formula = "100", variance = 10^2, dist = "binomial")
normal
def <- defData(varname = "Group",  formula = "2;1;.5;1", dist = "trtAssign")
N = 100
freqplotCat(def, N, xLabel = "My Variable")
def <- defData(varname = "X",  formula = "100", variance = 10^2, dist = "normal")
def <- defData(def, varname = "Y",  formula = "75 + .5*X", variance = 25^2, dist = "normal")
def <- defData(def, varname = "Y",  formula = "75 + .5*X", variance = 25^2, dist = "normal")
N = 200
## Correlation -------------
def <- defData(varname = "X",  formula = "100", variance = 10^2, dist = "normal")
def <- defData(def, varname = "Y",  formula = "75 + .5*X", variance = 25^2, dist = "normal")
N = 200
plotCorrelation(def, N, xlab = "Sleep", ylab = "Happiness", minX = 0, maxX = 200, minY = 0, maxY=200)
# Finding Sample Size
power_correlation(def,
startN=20, endN=300,
minX=0, maxX=200, minY=0, maxY=200)
## copy-paste to get the latest version of CoSMoS
if (!require('devtools')) {install.packages('devtools'); library(devtools)}
install_github('TycheLab/CoSMoS', upgrade = 'never')
library(CoSMoS)
?`CoSMoS-package`
# Set working directory and load library
setwd("C:/Users/ofeka/OneDrive - Technion/STSG/stsg python working folder/cosmos")
library(CoSMoS)
data <- read.csv("ud_edited.csv")
data[,'date'] <- as.POSIXct(data[,'date'])
setDT(data) ## converts to data.table
quickTSPlot(data$value)
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "paretoII", lag.max = 20)
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "paretoII", lag.max = 6)
reportTS(analysis, 'dist') + theme_light() ## show seasonal distribution fit
reportTS(analysis, 'acs') + theme_light() ## show seasonal ACS fit
reportTS(analysis, 'stat') ## display basic descriptive statistics
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "burrII", lag.max = 6)
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "burrXII", lag.max = 6)
reportTS(analysis, 'dist') + theme_light() ## show seasonal distribution fit
reportTS(analysis, 'acs') + theme_light() ## show seasonal ACS fit
reportTS(analysis, 'stat') ## display basic descriptive statistics
## Create a single sim. for sanity checking
simulation <- simulateTS(analysis, from=NULL, to=NULL)
quickTSPlot(simulation$value)
warnings()
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 6)
reportTS(analysis, 'dist') + theme_light() ## show seasonal distribution fit
reportTS(analysis, 'acs') + theme_light() ## show seasonal ACS fit
reportTS(analysis, 'stat') ## display basic descriptive statistics
## Create a single sim. for sanity checking
simulation <- simulateTS(analysis, from=NULL, to=NULL)
View(analysis)
analysis["dfits"]
analysis["dfits"["data_nz_1"]]
analysis["dfits"]["data_nz_1"]
analysis["dfits", "data_nz_1"]
analysis[["dfits"]]["data_nz_1"]
analysis[["dfits"]][["data_nz_1"]]
param <- analysis[["dfits"]][["data_nz_1"]]
#param <- list(scale=9816,)
sim_2 <- generateTS(n = 745, margdist = ggamma, margarg = param)
#param <- list(scale=9816,)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
#param <- list(scale=9816,)
custom_acf <- c(1, 0.8)
param <- analysis[["dfits"]][["data_nz_1"]]
#param <- list(scale=9816,)
custom_acf <- c(1, 0.8)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
#param <- analysis[["dfits"]][["data_nz_1"]]
param <- list(scale=9816, shape1 = 13.8, shape2 = 3.43)
custom_acf <- c(1, 0.8)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
custom_acf <- c(1)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
sim_2 <- generateTS(n = 100, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
custom_acf <- c(1, 0.8)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
analysis[["dfits"]][["data_nz_1"]]
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
#param <- analysis[["dfits"]][["data_nz_1"]]
param <- list(scale = 816, shape1 = .8, shape2 = .43)
custom_acf <- c(1, 0.8)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
#param <- analysis[["dfits"]][["data_nz_1"]]
param <- list(scale = 8169, shape1 = .8, shape2 = .43)
custom_acf <- c(1, 0.8)
sim_2 <- generateTS(n = 745, margdist = "ggamma", margarg = param, acsvalue = custom_acf)
traceback()
## Create a single sim. for sanity checking
simulation <- simulateTS(analysis, from=NULL, to=NULL)
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "paretoII", lag.max = 6)
reportTS(analysis, 'dist') + theme_light() ## show seasonal distribution fit
reportTS(analysis, 'acs') + theme_light() ## show seasonal ACS fit
reportTS(analysis, 'stat') ## display basic descriptive statistics
## Create a single sim. for sanity checking
simulation <- simulateTS(analysis, from=NULL, to=NULL)
quickTSPlot(simulation$value)
data <- read.csv("ud_edited.csv")
data[,'date'] <- as.POSIXct(data[,'date'])
setDT(data) ## converts to data.table
quickTSPlot(data$value)
analysis <- analyzeTS(TS = data, season = "month", dist = "ggamma",
acsID = "paretoII", lag.max = 6)
reportTS(analysis, 'dist') + theme_light() ## show seasonal distribution fit
reportTS(analysis, 'acs') + theme_light() ## show seasonal ACS fit
reportTS(analysis, 'stat') ## display basic descriptive statistics
## Create a single sim. for sanity checking
simulation <- simulateTS(analysis, from=NULL, to=NULL)
quickTSPlot(simulation$value)
## Batch production of simulations + Saving to file
n_simulations <- 1000
dt <- data.table()
for (i in 0:(n_simulations-1)){
print(paste0('Sim. number ',i))
simulation <- simulateTS(analysis, from=NULL, to=NULL)
column_name <- paste0('values_',i)
dt[, (column_name):=simulation[[2]]]
}
fwrite(dt, "ud_cosmos.csv")
